<!DOCTYPE html>

<body>
    <style>
        #progress_bar {
            margin: 10px 0;
            padding: 3px;
            border: 1px solid #000;
            font-size: 14px;
            clear: both;
            opacity: 0;
            -moz-transition: opacity 1s linear;
            -o-transition: opacity 1s linear;
            -webkit-transition: opacity 1s linear;
        }

        #progress_bar.loading {
            opacity: 1.0;
        }

        #progress_bar .percent {
            background-color: #99ccff;
            height: auto;
            width: 0;
        }
        #byte_content {
            margin: 5px 0;
            max-height: 100px;
            overflow-y: auto;
            overflow-x: hidden;
        }

    </style>

    <input type="file" id="files" name="file" />
    <button onclick="abortRead();">Cancel read</button>
    <div id="progress_bar"><div class="percent">0%</div></div>
    <div id="byte_content"></div>
    <script>
        var reader, stream, loopsMax, channelMax, dataLengthMax;
        var progress = document.querySelector('.percent');

        function abortRead() {
            reader.abort();
        }

        function errorHandler(evt) {
            switch (evt.target.error.code) {
                case evt.target.error.NOT_FOUND_ERR:
                    alert('File Not Found!');
                    break;
                case evt.target.error.NOT_READABLE_ERR:
                    alert('File is not readable');
                    break;
                case evt.target.error.ABORT_ERR:
                    break; // noop
                default:
                    alert('An error occurred reading this file.');
            };
        }

        function updateProgress(evt) {
            // evt is an ProgressEvent.
            if (evt.lengthComputable) {
                var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                // Increase the progress bar length.
                if (percentLoaded < 100) {
                    progress.style.width = percentLoaded + '%';
                    progress.textContent = percentLoaded + '%';
                }
            }
        }
        function drawData(t,loopsMax,channelMax, dataLengthMax,stream) {
            for (var channel = 0; channel < 5; channel++) {
                var offset = 8*10, ix = 0;
                var canvas = document.getElementById('Channel' + channel);
                var context = canvas.getContext('2d');
                context.beginPath();
                var i = 0;
                while (chanelIndex + offset < data.Length)
                {
                           
                    var totalPoints = dataLengthMax * channelMax/offset;
                    var deltaX = (canvas.clientWidth - 10)/ totalPoints;
                    var offsetY = 32767;
                    var scaleY = (canvas.clientHeight - 10) / (32768 * 2);
                    var x0, x1, y0, y1;

                    var dataInx = 6 + 2 * (t * (channelMax * dataLengthMax) + channel + i*offset) ;//2 * channel * dataLengthMax + 2 * i 
                    var data0 = stream.getInt16(dataInx, true);
                    var data1 = stream.getInt16(dataInx + 2 * offset, true);

                    x0 = 5 + deltaX * ix++;
                    x1 = 5 + deltaX * ix;
                    y0 = 5 + (data0 + offsetY) * scaleY;
                    y1 = 5 + (data1 + offsetY) * scaleY;

                    context.moveTo(x0, y0);
                    context.lineTo(x1, y1);
                    chanelIndex += offset;
                }

                context.stroke();
            }
        }
        function ReDrawData(t) {
            for (var channel = 0; channel < 5; channel++) {
                var canvas = document.getElementById('Channel' + channel);
                var ctx = canvas.getContext('2d');
                ctx.save();

                // Use the identity matrix while clearing the canvas
                ctx.setTransform(1, 0, 0, 1, 0, 0);
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                // Restore the transform
                ctx.restore();
                drawData(t, loopsMax, channelMax, dataLengthMax, stream);
            }
        }

        function handleFileSelect(evt) {
            // Reset progress indicator on new file selection.
            progress.style.width = '0%';
            progress.textContent = '0%';

            reader = new FileReader();
            reader.onerror = errorHandler;
            reader.onprogress = updateProgress;
            reader.onabort = function (e) {
                alert('File read cancelled');
            };
            reader.onloadstart = function (e) {
                document.getElementById('progress_bar').className = 'loading';
            };
            reader.onload = function (e) {
                // Ensure that the progress bar displays 100% at the end.
                progress.style.width = '100%';
                progress.textContent = '100%';
                setTimeout("document.getElementById('progress_bar').className='';", 2000);
            }
            reader.onloadend = function (evt) {
                if (evt.target.readyState == FileReader.DONE) { // DONE == 2
                    // document.getElementById('byte_content').textContent = evt.target.result;
                    stream = new DataView(evt.target.result);
                 

                    loopsMax = stream.getInt16(0,true);
                    channelMax = stream.getInt16(2, true);
                    dataLengthMax = stream.getInt16(4, true);
                    drawData(0, loopsMax, channelMax, dataLengthMax, stream);
                }
            };
            reader.readAsArrayBuffer(evt.target.files[0]);
        }
           
        document.getElementById('files').addEventListener('change', handleFileSelect, false);
    </script>
    
    <canvas id="Channel0" width="578" height="200"></canvas>
    <canvas id="Channel1" width="578" height="200"></canvas>
    <canvas id="Channel2" width="578" height="200"></canvas>
    <canvas id="Channel3" width="578" height="200"></canvas>
    <canvas id="Channel4" width="578" height="200"></canvas>
    <input type="range" min="0" max="6000" step="1" value="0" onchange="ReDrawData(this.value)">
</body>

</html>